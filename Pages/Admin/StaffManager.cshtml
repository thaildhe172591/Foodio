@page
@model FoodioAPI.Pages.Admin.StaffManagerModel
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Quản lý Nhân viên";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet" />
<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet" />

<style>
    #usersTable th,
    #usersTable td,
    #shiftsTable th,
    #shiftsTable td {
       color: whitesmoke !important;
    }
    
</style>

<main class="main-wrapper">
    <div class="main-content">
        <div class="container-fluid py-4">
            <h3 class="mb-4">Quản lý Nhân Viên</h3>

            <!-- Search & Actions -->
            <div class="card mb-4">
                <div class="card-body">
                    <form id="searchForm" class="row g-2 align-items-end">
                        <div class="col-sm-4">
                            <label class="form-label">Từ khóa</label>
                            <input type="text" class="form-control" id="keyword" placeholder="Tên / Email" />
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label">Vai trò</label>
                            <select class="form-select" id="roleFilter">
                                <option value="">Tất cả</option>
                            </select>
                        </div>
                        <div class="col-sm-3">
                            <label class="form-label">Trạng thái</label>
                            <select class="form-select" id="lockFilter">
                                <option value="">Tất cả</option>
                                <option value="true">Đã khoá</option>
                                <option value="false">Hoạt động</option>
                            </select>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Table -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Danh sách người dùng</h5>
                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#userModal" data-mode="add">Thêm Nhân Viên</button>
                </div>
                <div class="card-body">
                    <table id="usersTable" class="table table-striped" style="width:100%">
                        <thead>
                            <tr>
                                <th>Email</th>
                                <th>User Name</th>
                                <th>Phone</th>
                                <th>Roles</th>
                                <th>Trạng thái</th>
                                <th>Hành động</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Modal Add/Edit -->
<div class="modal fade" id="userModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">Thêm Người dùng</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="userForm">
                <div class="modal-body row g-3">
                    <input type="hidden" id="userId" />
                    <div class="col-sm-6">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required />
                    </div>
                    <div class="col-sm-6">
                        <label class="form-label">Mật khẩu</label>
                        <input type="password" class="form-control" id="password" />
                    </div>
                    <div class="col-sm-6">
                        <label class="form-label">User Name</label>
                        <input type="text" class="form-control" id="userName" />
                    </div>
                    <div class="col-sm-6">
                        <label class="form-label">Số điện thoại</label>
                        <input type="text" class="form-control" id="phoneNumber" />
                    </div>
                    <div class="col-sm-6">
                        <label class="form-label">Vai trò</label>
                        <select multiple class="form-select" id="rolesSelect"></select>
                    </div>
                    <div class="col-sm-6 form-check ms-2">
                        <input class="form-check-input" type="checkbox" id="emailConfirmed" />
                        <label class="form-check-label">Xác nhận Email</label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                    <button type="submit" class="btn btn-primary">Lưu</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal Quản lý Ca làm việc -->
<div class="modal fade" id="shiftModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="shiftModalLabel">Quản lý Ca làm việc - <span id="staffName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form thêm ca làm mới -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6 class="mb-0">Thêm Ca làm mới</h6>
                    </div>
                    <div class="card-body">
                        <form id="shiftForm" class="row g-3">
                            <input type="hidden" id="shiftUserId" />
                            <input type="hidden" id="shiftId" />
                            <div class="col-md-3">
                                <label class="form-label">Ngày bắt đầu</label>
                                <input type="date" class="form-control" id="shiftStartDate" required />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Giờ bắt đầu</label>
                                <input type="time" class="form-control" id="shiftStartTime" required />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Giờ kết thúc</label>
                                <input type="time" class="form-control" id="shiftEndTime" required />
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Vai trò ca làm</label>
                                <select class="form-select" id="shiftRole" required>
                                    <option value="">Chọn vai trò</option>
                                    <option value="Cashier">Thu ngân</option>
                                    <option value="Kitchen">Bếp</option>
                                    <option value="Shipper">Giao hàng</option>
                                    <option value="Admin">Quản lý</option>
                                </select>
                            </div>
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary" id="saveShiftBtn">Thêm Ca</button>
                                <button type="button" class="btn btn-secondary" id="cancelShiftBtn" style="display:none;">Hủy</button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Danh sách ca làm -->
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Danh sách Ca làm việc</h6>
                    </div>
                    <div class="card-body">
                        <table id="shiftsTable" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Ngày</th>
                                    <th>Giờ bắt đầu</th>
                                    <th>Giờ kết thúc</th>
                                    <th>Vai trò</th>
                                    <th>Hành động</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    @await Html.PartialAsync("_ToastrScripts")

    <script>
        const apiBase = "/api/admin/users";
        let usersTable;
        const token = localStorage.getItem("access_token");
        let rolesMaster = [];

        $(function () {
            usersTable = $("#usersTable").DataTable({
                columns: [
                    { data: "email" },
                    { data: "userName" },
                    { data: "phoneNumber" },
                    {
                        data: "roles",
                        render: roles => roles.join(", ")
                    },
                    {
                        data: null,
                        render: d => d.isLocked ? '<span class="badge bg-danger">Khoá</span>' : '<span class="badge bg-success">Hoạt động</span>'
                    },
                    {
                        data: null,
                        orderable: false,
                        render: d => `
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-info detail-btn" style='margin-right:6px' data-id="${d.id}" data-name="${d.userName}" title="Xem ca làm việc"><i class="bi bi-calendar-check"></i></button>
                                <button class="btn btn-outline-primary edit-btn" style='margin-right:6px' data-id="${d.id}" title="Chỉnh sửa"><i class="bi bi-pencil"></i></button>
                                <button class="btn btn-outline-danger delete-btn" data-id="${d.id}" title="Xóa"><i class="bi bi-trash"></i></button>
                            </div>`
                    }
                ]
            });

            loadRoles();
            fetchUsers();

            // search
            $("#btnSearch").click(fetchUsers);
            
            // Tự động tìm kiếm khi nhập text
            let searchTimeout;
            $('#keyword').on('input keyup', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(fetchUsers, 500); // Debounce 500ms
            });
            
            // Tự động tìm kiếm khi thay đổi dropdown
            $('#roleFilter, #lockFilter').on('change', fetchUsers);
            
            // Khởi tạo DataTable cho ca làm việc
            window.shiftsTable = $('#shiftsTable').DataTable({
                order: [[0, 'desc']], // Sắp xếp theo ngày mới nhất
                columns: [
                    { 
                        data: 'startTime',
                        title: 'Ngày',
                        render: function(data) {
                            if (!data) return '';
                            return new Date(data).toLocaleDateString('vi-VN');
                        }
                    },
                    { 
                        data: 'startTime',
                        title: 'Giờ bắt đầu',
                        render: function(data) {
                            if (!data) return '';
                            return new Date(data).toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'});
                        }
                    },
                    { 
                        data: 'endTime',
                        title: 'Giờ kết thúc',
                        render: function(data) {
                            if (!data) return '';
                            return new Date(data).toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'});
                        }
                    },
                    { 
                        data: 'role',
                        title: 'Vai trò',
                        render: function(data) {
                            const roleMap = {
                                'Admin': 'Quản lý',
                                'Cashier': 'Thu ngân', 
                                'Kitchen': 'Bếp',
                                'Shipper': 'Giao hàng'
                            };
                            return roleMap[data] || data;
                        }
                    },
                    {
                        data: null,
                        title: 'Hành động',
                        orderable: false,
                        render: function(d) {
                            // Escape single quotes trong JSON để tránh lỗi
                            const shiftDataEncoded = encodeURIComponent(JSON.stringify(d));
                            return `
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary edit-shift-btn" style='margin-right:6px' data-shift='${shiftDataEncoded}' title="Sửa ca làm"><i class="bi bi-pencil"></i></button>
                                    <button class="btn btn-outline-danger delete-shift-btn" data-id="${d.id}" title="Xóa ca làm"><i class="bi bi-trash"></i></button>
                                </div>`;
                        }
                    }
                ]
            });

            // open modal add
            $('#userModal').on('show.bs.modal', function (e) {
                const btn = $(e.relatedTarget);
                const mode = btn.data('mode');
                if (mode === 'add') {
                    resetModal();
                }
            });

            // submit add / edit
            $("#userForm").on("submit", async function (e) {
                e.preventDefault();
                const id = $("#userId").val();
                const dto = {
                    email: $("#email").val(),
                    phoneNumber: $("#phoneNumber").val(),
                    userName: $("#userName").val(),
                    roleIds: $("#rolesSelect").val()
                };

                if (!id) {
                    dto.password = $("#password").val();
                    dto.emailConfirmed = $("#emailConfirmed").is(":checked");
                }

                const method = id ? "PUT" : "POST";
                const url = id ? `${apiBase}/${id}` : apiBase;

                const res = await fetch(url, {
                    method: method,
                    headers: {
                        "Content-Type": "application/json",
                        "Authorization": `Bearer ${token}`
                    },
                    body: JSON.stringify(dto)
                });
                if (res.ok) {
                    closeModalSafely('#userModal');
                    await fetchUsers();
                    await Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: id ? 'Đã cập nhật nhân viên' : 'Đã thêm nhân viên mới',
                        timer: 2000,
                        showConfirmButton: false
                    });
                  
                } else {
                    const err = await res.json();
                    await Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: err.message ?? 'Có lỗi xảy ra khi lưu thông tin'
                    });
                }
            });

            // edit
            $(document).on('click', '.edit-btn', async function () {
                const id = $(this).data('id');
                const res = await fetch(`${apiBase}/get-by-id/${id}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                const { data } = await res.json();
                resetModal(data);
                $('#userModal').modal('show');
            });

            // delete
            $(document).on('click', '.delete-btn', async function () {
                const result = await Swal.fire({
                    icon: 'warning',
                    title: 'Xác nhận xóa',
                    text: 'Bạn có chắc chắn muốn xóa nhân viên này?',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Xóa',
                    cancelButtonText: 'Hủy'
                });
                
                if (!result.isConfirmed) return;
                
                const id = $(this).data('id');
                const res = await fetch(`${apiBase}/delete/${id}`, {
                    method: 'DELETE',
                    headers: { Authorization: `Bearer ${token}` }
                });
                if (res.ok) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Đã xóa!',
                        text: 'Nhân viên đã được xóa thành công',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    await fetchUsers();
                } else {
                    const err = await res.json();
                    await Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: err.message ??'Không thể xóa nhân viên. Vui lòng thử lại.'
                    });
                }
            });

            // Xem chi tiết ca làm việc
            $(document).on('click', '.detail-btn', function () {
                const userId = $(this).data('id');
                const userName = $(this).data('name');
                openShiftModal(userId, userName);
            });

            // Submit form ca làm việc
            $('#shiftForm').on('submit', function(e) {
                e.preventDefault();
                saveShift();
            });

            // Hủy chỉnh sửa ca làm việc
            $('#cancelShiftBtn').on('click', function() {
                resetShiftForm();
            });

            // Chỉnh sửa ca làm việc
            $(document).on('click', '.edit-shift-btn', function () {
                const shiftDataEncoded = $(this).data('shift');
                const shiftData = JSON.parse(decodeURIComponent(shiftDataEncoded));
                editShift(shiftData);
            });

            // Xóa ca làm việc
            $(document).on('click', '.delete-shift-btn', function () {
                const shiftId = $(this).data('id');
                deleteShift(shiftId);
            });
        });

        async function loadRoles() {
            const res = await fetch(`${apiBase}/get-all-roles-staff`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            const { data } = await res.json();
            rolesMaster = data;
            data.forEach(r => {
                $("#rolesSelect, #roleFilter").append(`<option value="${r.id}">${r.displayName}</option>`);
            });
        }

        async function fetchUsers() {
            const params = new URLSearchParams();
            const kw = $("#keyword").val();
            if (kw) params.append('searchKeyword', kw);
            const role = $("#roleFilter").val();
            if (role) params.append('roleId', role);
            const locked = $("#lockFilter").val();
            if (locked !== '') params.append('isLocked', locked);

            const res = await fetch(`${apiBase}/search-staff?${params.toString()}`, {
                headers: { Authorization: `Bearer ${token}` }
            });
            const json = await res.json();
            usersTable.clear();
            usersTable.rows.add(json.data.data ?? json.data);
            usersTable.draw();
        }

        function resetModal(user = null) {
            $("#userId").val(user?.id || '');
            $("#email").val(user?.email || '').prop('readonly', !!user);
            $("#password").val('');
            $("#userName").val(user?.userName || '');
            $("#phoneNumber").val(user?.phoneNumber || '');
            $("#emailConfirmed").prop('checked', user?.emailConfirmed ?? false);

            // map role names -> ids for preselect
            if (user?.roles && rolesMaster.length) {
                const ids = rolesMaster.filter(r => user.roles.includes(r.displayName) || user.roles.includes(r.name)).map(r => r.id);
                $("#rolesSelect").val(ids).change();
            } else {
                $("#rolesSelect").val([]).change();
            }

            $("#userModalLabel").text(user ? 'Cập nhật Người dùng' : 'Thêm Người dùng');
        }

        // Helper function để đóng modal an toàn
        function closeModalSafely(modalId) {
            $(modalId).modal('hide');
            // Đảm bảo backdrop được xóa và body được reset
            setTimeout(() => {
                $('.modal-backdrop').remove();
                $('body').removeClass('modal-open').css('padding-right', '');
            }, 300); // Đợi animation hoàn tất
        }

        // ===== QUẢN LÝ CA LÀM VIỆC =====
        let currentUserId = '';
        let shiftsData = [];
        const shiftApiBase = "/api/admin/shifts";

        function openShiftModal(userId, userName) {
            currentUserId = userId;
            $('#staffName').text(userName);
            $('#shiftUserId').val(userId);
            resetShiftForm();
            loadShifts(userId);
            $('#shiftModal').modal('show');
        }

        async function loadShifts(userId) {
            try {
                const res = await fetch(`${shiftApiBase}/user/${userId}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                
                if (res.ok) {
                    const response = await res.json();
                    shiftsData = response.data || [];
                    window.shiftsTable.clear();
                    window.shiftsTable.rows.add(shiftsData);
                    window.shiftsTable.draw();
                } else {
                    console.error('Lỗi khi tải ca làm việc:', res.statusText);
                    toastr.error('Không thể tải danh sách ca làm việc');
                    shiftsData = [];
                    window.shiftsTable.clear().draw();
                }
            } catch (error) {
                console.error('Lỗi khi gọi API ca làm việc:', error);
                toastr.error('Có lỗi xảy ra khi tải ca làm việc');
                shiftsData = [];
                window.shiftsTable.clear().draw();
            }
        }

        function resetShiftForm() {
            $('#shiftForm')[0].reset();
            $('#shiftId').val('');
            $('#saveShiftBtn').text('Thêm Ca').removeClass('btn-warning').addClass('btn-primary');
            $('#cancelShiftBtn').hide();
        }

        async function saveShift() {
            const shiftId = $('#shiftId').val();
            const startDate = $('#shiftStartDate').val();
            const startTime = $('#shiftStartTime').val();
            const endTime = $('#shiftEndTime').val();
            const role = $('#shiftRole').val();

            if (!startDate || !startTime || !endTime || !role) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Thiếu thông tin!',
                    text: 'Vui lòng điền đầy đủ thông tin ca làm việc'
                });
                return;
            }

            const startDateTime = new Date(`${startDate}T${startTime}:00`);
            const endDateTime = new Date(`${startDate}T${endTime}:00`);

            if (endDateTime <= startDateTime) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Thời gian không hợp lệ!',
                    text: 'Giờ kết thúc phải sau giờ bắt đầu'
                });
                return;
            }

            const shiftData = {
                userId: currentUserId,
                startTime: startDateTime.toISOString(),
                endTime: endDateTime.toISOString(),
                role: role
            };

            try {
                let res;
                if (shiftId) {
                    // Cập nhật ca làm việc
                    res = await fetch(`${shiftApiBase}/${shiftId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: `Bearer ${token}`
                        },
                        body: JSON.stringify(shiftData)
                    });
                } else {
                    // Thêm ca làm việc mới
                    res = await fetch(shiftApiBase, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            Authorization: `Bearer ${token}`
                        },
                        body: JSON.stringify(shiftData)
                    });
                }

                if (res.ok) {
                    const response = await res.json();
                    await Swal.fire({
                        icon: 'success',
                        title: 'Thành công!',
                        text: shiftId ? 'Đã cập nhật ca làm việc' : 'Đã thêm ca làm việc',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    resetShiftForm();
                    loadShifts(currentUserId); // Reload danh sách ca làm việc
                } else {
                    const error = await res.json();
                    await Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: error.message || 'Có lỗi xảy ra khi lưu ca làm việc'
                    });
                }
            } catch (error) {
                console.error('Lỗi khi lưu ca làm việc:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi lưu ca làm việc'
                });
            }
        }

        function editShift(shiftData) {
            const startDate = new Date(shiftData.startTime);
            const endDate = new Date(shiftData.endTime);
            
            $('#shiftId').val(shiftData.id);
            $('#shiftStartDate').val(startDate.toISOString().split('T')[0]);
            $('#shiftStartTime').val(startDate.toTimeString().slice(0, 5));
            $('#shiftEndTime').val(endDate.toTimeString().slice(0, 5));
            $('#shiftRole').val(shiftData.role);
            
            $('#saveShiftBtn').text('Cập nhật Ca').removeClass('btn-primary').addClass('btn-warning');
            $('#cancelShiftBtn').show();
        }

        async function deleteShift(shiftId) {
            const result = await Swal.fire({
                icon: 'warning',
                title: 'Xác nhận xóa',
                text: 'Bạn có chắc chắn muốn xóa ca làm việc này?',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Xóa',
                cancelButtonText: 'Hủy'
            });
            
            if (!result.isConfirmed) return;
            
            try {
                const res = await fetch(`${shiftApiBase}/${shiftId}`, {
                    method: 'DELETE',
                    headers: { Authorization: `Bearer ${token}` }
                });

                if (res.ok) {
                    const response = await res.json();
                    await Swal.fire({
                        icon: 'success',
                        title: 'Đã xóa!',
                        text: 'Ca làm việc đã được xóa thành công',
                        timer: 2000,
                        showConfirmButton: false
                    });
                    loadShifts(currentUserId); // Reload danh sách ca làm việc
                } else {
                    const error = await res.json();
                    await Swal.fire({
                        icon: 'error',
                        title: 'Lỗi!',
                        text: error.message || 'Không thể xóa ca làm việc'
                    });
                }
            } catch (error) {
                console.error('Lỗi khi xóa ca làm việc:', error);
                await Swal.fire({
                    icon: 'error',
                    title: 'Lỗi!',
                    text: 'Có lỗi xảy ra khi xóa ca làm việc'
                });
            }
        }
    </script>
}