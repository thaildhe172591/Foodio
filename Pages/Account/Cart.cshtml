
@page "/Account/Cart"
@model FoodieAPII.Pages.Account.CartModel
@{
    ViewData["HideLayoutHeader"] = true;
}

<!-- HEADER -->
<div class="sticky-top bg-white shadow-sm" style="z-index:1030;">
    <div class="container">
        <div class="header d-flex align-items-center justify-content-between py-3">
            <img src="~/images/logo_foddie.jpg" alt="GrabFood Logo" style="height:80px;">
            <div class="d-flex align-items-center gap-4">
                <button class="btn btn-success rounded-circle position-relative"
                        style="width:50px;height:50px;"
                        data-bs-toggle="modal" data-bs-target="#cartModal">
                    <i class="bi bi-cart3 fs-4 text-white"></i>
                    <span id="cart-quantity-badge"
                          class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                          style="font-size:0.7em;">4</span>
                </button>
                <a href="/Account/User">
                    <div class="d-flex flex-column align-items-center">
                        <i class="bi bi-person-circle text-dark" style="font-size: 30px;"></i>
                        <div class="fw-semibold text-dark mt-1">Nguyễn Văn A</div>
                    </div>
                </a>
            </div>
        </div>
    </div>
</div>

<!-- CART BODY -->
<div class="container py-5">
    <h2 class="mb-4">Giỏ Hàng của bạn</h2>
    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th>Sản phẩm</th>
                <th>Đơn giá</th>
                <th class="text-center">Số lượng</th>
                <th>Thành tiền</th>
            </tr>
        </thead>
        <tbody id="cart-body">
            <!-- Sẽ được load từ localStorage và API -->
            <tr id="loading-row">
                <td colspan="4" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="mt-2 text-muted">Đang tải giỏ hàng...</p>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr>
                <th colspan="3" class="text-end">Tổng cộng:</th>
                <th id="cart-total">430,400 ₫</th>
            </tr>
        </tfoot>
    </table>
    <div id="cart-actions" class="mt-3">
        <a href="/Account/HomePageLogin" class="btn btn-secondary">Tiếp tục mua sắm</a>
        <a href="/Account/TakeoutPayment" class="btn btn-primary ms-2" id="checkout-btn">
            Thanh toán <i class="bi bi-credit-card ms-1"></i>
        </a>
    </div>
</div>

<!-- DYNAMIC UPDATE SCRIPT -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // API Config
    const menuApi = "/api/admin/menu-items";
    const token = localStorage.getItem('access_token');
    
    let cartItems = {}; // Store item details from API

    document.addEventListener("DOMContentLoaded", async () => {
        const badge = document.getElementById("cart-quantity-badge");
        const tbody = document.getElementById('cart-body');
        const totalCell = document.getElementById('cart-total');

        // Load cart from localStorage and render
        await loadAndRenderCart();

        // Event handlers for increase/decrease buttons
        $(document).on('click', '.btn-increase', function() {
            const productId = $(this).data('product-id');
            increaseQuantity(productId);
        });

        $(document).on('click', '.btn-decrease', function() {
            const productId = $(this).data('product-id');
            decreaseQuantity(productId);
        });
    });

    // Cart Management Functions
    function getCart() {
        const cartData = localStorage.getItem('shoppingCart');
        return cartData ? JSON.parse(cartData) : {};
    }

    function saveCart(cart) {
        localStorage.setItem('shoppingCart', JSON.stringify(cart));
        updateCartBadge();
    }

    function updateCartBadge() {
        const cart = getCart();
        const totalQuantity = Object.values(cart).reduce((sum, qty) => sum + qty, 0);
        document.getElementById('cart-quantity-badge').textContent = totalQuantity;
    }

    function formatVND(n) {
        return n.toLocaleString('vi-VN') + ' ₫';
    }

    function increaseQuantity(productId) {
        const cart = getCart();
        cart[productId] = (cart[productId] || 0) + 1;
        saveCart(cart);
        updateCartDisplay();
    }

    function decreaseQuantity(productId) {
        const cart = getCart();
        if (cart[productId] && cart[productId] > 1) {
            cart[productId]--;
            saveCart(cart);
            updateCartDisplay();
        } else {
            // Remove item from cart
            delete cart[productId];
            saveCart(cart);
            // Remove row from table and update display
            $(`tr[data-product-id="${productId}"]`).remove();
            updateTotal();
            
            // Check if cart is empty
            if (Object.keys(cart).length === 0) {
                showEmptyCart();
            } else {
                $('body').removeClass('cart-empty');
            }
        }
    }

    function updateCartDisplay() {
        const cart = getCart();
        
        // Update quantities and subtotals in the table
        Object.keys(cart).forEach(productId => {
            const quantity = cart[productId];
            const row = $(`tr[data-product-id="${productId}"]`);
            if (row.length && cartItems[productId]) {
                const price = cartItems[productId].price || 0;
                const subtotal = price * quantity;
                
                row.find('.qty').text(quantity);
                row.find('.subtotal').text(formatVND(subtotal));
            }
        });
        
        updateTotal();
    }

    function updateTotal() {
        let total = 0;
        $('#cart-body tr[data-product-id]').each(function() {
            const subtotalText = $(this).find('.subtotal').text().replace(/\D/g, '');
            total += parseInt(subtotalText) || 0;
        });
        $('#cart-total').text(formatVND(total));
    }

    async function loadAndRenderCart() {
        const cart = getCart();
        const tbody = $('#cart-body');
        
        // Update badge first
        updateCartBadge();
        
        if (Object.keys(cart).length === 0) {
            showEmptyCart();
            return;
        }

        try {
            // Fetch item details from API
            const itemPromises = Object.keys(cart).map(async (productId) => {
                const response = await fetch(`${menuApi}/${productId}`, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const itemData = await response.json();
                    cartItems[productId] = itemData;
                    return { productId, itemData, quantity: cart[productId] };
                } else {
                    console.error(`Failed to fetch item ${productId}`);
                    return null;
                }
            });

            const items = await Promise.all(itemPromises);
            renderCartTable(items.filter(item => item !== null));
            
        } catch (error) {
            console.error('Error loading cart:', error);
            showErrorState();
        }
    }

    function renderCartTable(items) {
        const tbody = $('#cart-body');
        tbody.empty();
        $('body').removeClass('cart-empty');
        
        if (items.length === 0) {
            showEmptyCart();
            return;
        }

        items.forEach(({ productId, itemData, quantity }) => {
            const price = itemData.price || 0;
            const subtotal = price * quantity;
            const defaultImage = '/images/banner-1.jpg';
            const imageUrl = itemData.imageUrl && itemData.imageUrl.trim() ? itemData.imageUrl : defaultImage;
            
            const row = `
                <tr data-product-id="${productId}">
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${imageUrl}" alt="${itemData.name}" class="cart-item-image me-3" 
                                 style="width: 60px; height: 60px; object-fit: cover; border-radius: 8px;"
                                 onerror="this.src='${defaultImage}'">
                            <div>
                                <h6 class="mb-1">${itemData.name || 'Món ăn'}</h6>
                                <small class="text-muted">${itemData.description || ''}</small>
                            </div>
                        </div>
                    </td>
                    <td class="price">${formatVND(price)}</td>
                    <td class="text-center">
                        <div class="d-flex justify-content-center align-items-center">
                            <button class="btn btn-sm btn-danger btn-decrease" data-product-id="${productId}">–</button>
                            <span class="qty mx-2">${quantity}</span>
                            <button class="btn btn-sm btn-success btn-increase" data-product-id="${productId}">+</button>
                        </div>
                    </td>
                    <td class="subtotal">${formatVND(subtotal)}</td>
                </tr>
            `;
            tbody.append(row);
        });
        
        updateTotal();
    }

    function showEmptyCart() {
        const tbody = $('#cart-body');
        $('body').addClass('cart-empty');
        tbody.html(`
            <tr>
                <td colspan="4" class="text-center py-5">
                    <div class="empty-cart">
                        <i class="bi bi-cart-x" style="font-size: 4rem; color: #6c757d;"></i>
                        <h4 class="mt-3 mb-2">Giỏ hàng trống</h4>
                        <p class="text-muted">Bạn chưa có món ăn nào trong giỏ hàng</p>
                        <a href="/Account/HomePageLogin" class="btn btn-primary mt-2">
                            <i class="bi bi-arrow-left me-2"></i>Tiếp tục mua sắm
                        </a>
                    </div>
                </td>
            </tr>
        `);
        $('#cart-total').text('0 ₫');
    }

    function showErrorState() {
        const tbody = $('#cart-body');
        tbody.html(`
            <tr>
                <td colspan="4" class="text-center py-5">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        Không thể tải thông tin giỏ hàng. Vui lòng thử lại sau.
                    </div>
                </td>
            </tr>
        `);
    }
</script>

<!-- STYLES -->
<style>
    .header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 24px;
        background: #fff;
    }

        .header img {
            border-radius: 8px;
        }

    .btn-success.position-relative .badge {
        transform: translate(25%, -25%);
    }

    .table th, .table td {
        vertical-align: middle;
    }

    .table tfoot th {
        background: #f8f9fa;
        font-weight: bold;
    }

    /* Custom styles */
    .btn-increase, .btn-decrease {
        width: 30px;
        height: 30px;
        padding: 5px;
        font-size: 18px;
        border-radius: 50%;
        background-color: #f0f0f0;
        border: 1px solid #ddd;
        transition: background-color 0.3s, box-shadow 0.3s;
    }

        .btn-increase:hover, .btn-decrease:hover {
            background-color: #e0e0e0;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

    .qty {
        font-size: 16px;
        font-weight: bold;
        color: #333;
        margin: 0 10px; /* Adjust space around the quantity */
    }

    .subtotal {
        font-size: 16px;
        font-weight: bold;
        color: #2d3e50;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    /* Nút thanh toán và tiếp tục mua sắm */
    .btn-secondary, .btn-primary {
        padding: 12px 20px;
        font-size: 16px;
        border-radius: 25px;
        display: inline-block;
        text-align: center;
        transition: background-color 0.3s, transform 0.3s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

        .btn-primary:hover, .btn-secondary:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

    /* Modal styling */
    .modal-content {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
        border-bottom: 1px solid #ddd;
    }

    .modal-title {
        font-size: 18px;
        font-weight: bold;
    }

    .modal-body {
        font-size: 16px;
    }

    /* Tổng cộng giỏ hàng */
    #cart-total {
        font-weight: bold;
        font-size: 1.2em;
    }

    .btn-success {
        background: linear-gradient(90deg, #ffc107, #ff8800);
        color: white;
        font-weight: 600;
        border: none;
        border-radius: 50%;
        
        position: relative;
    }

        .btn-success:hover {
            background: linear-gradient(90deg, #ff9800, #ff5722);
        }

    /* Số lượng giỏ hàng (cart quantity badge) */
    #cart-quantity-badge {
        position: absolute;
        top: 0;
        start: 100%;
        translate: middle;
        badge rounded-pill bg-danger;
        font-size: 0.7em;
    }

    /* Empty cart styling */
    .empty-cart {
        padding: 2rem;
        text-align: center;
    }

    .empty-cart i {
        opacity: 0.6;
    }

    .empty-cart h4 {
        color: #495057;
        font-weight: 600;
    }

    /* Loading animation */
    .spinner-border {
        width: 2rem;
        height: 2rem;
    }

    /* Cart item image styling */
    .cart-item-image {
        border: 1px solid #dee2e6;
        transition: all 0.2s ease;
    }

    .cart-item-image:hover {
        transform: scale(1.05);
    }

    /* Quantity controls styling */
    .btn-increase:hover, .btn-decrease:hover {
        transform: scale(1.1);
    }

    .btn-increase, .btn-decrease {
        transition: all 0.2s ease;
        min-width: 30px;
    }

    /* Hide checkout button when cart is empty */
    .cart-empty #checkout-btn {
        display: none !important;
    }
</style>