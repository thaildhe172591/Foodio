@page
@model FoodieAPII.Pages.Shipper.ShipperManagementModel
@{
    ViewData["HideLayoutHeader"] = true;
}
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>

<div class="container mt-5">
    <h1 class="text-center mb-4">Quản lý Đơn Hàng - Shipper</h1>
    <div id="today-time" class="text-center mb-4" style="font-weight:bold;color:#2980b9;"></div>
    <div id="user-info" style="position:fixed;top:20px;right:30px;z-index:1000;"></div>

    <!-- Thanh điều hướng -->
    <div class="row justify-content-center">
        <div class="col-8">
            <nav class="nav-container p-3 border rounded">
                <nav class="nav nav-pills justify-content-center">
                    <a class="nav-link active" href="javascript:void(0);" onclick="showSection('item-1')">Đơn Chờ Giao</a>
                    <a class="nav-link" href="javascript:void(0);" onclick="showSection('item-2')">Cập Nhật Trạng Thái</a>
                    <a class="nav-link" href="javascript:void(0);" onclick="showSection('item-3')">Lịch Sử Giao Hàng</a>
                </nav>
            </nav>
        </div>
    </div>

    <!-- Nội dung -->
    <div class="row mt-4">
        <div class="col-12">
            <!-- Đơn Chờ Giao -->
            <div id="item-1" class="section-content">
                <h4>Đơn Chờ Giao</h4>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Mã Đơn</th>
                            <th>Tên Người Nhận</th>
                            <th>SĐT Người Nhận</th>
                            <th>Địa chỉ</th>
                            <th>Món Ăn</th>
                            <th>Số Lượng</th>
                            <th>Ghi chú</th>
                            <th>Phí Ship</th>
                            <th>Tổng Tiền</th>
                            <th>Ngày Đặt</th>
                            <th>Trạng Thái</th>
                            <th>Hành Động</th>
                        </tr>
                    </thead>

                    <tbody id="deliveries-body">
                        <!-- dữ liệu sẽ được render động ở đây -->
                    </tbody>
                </table>
            </div>
            <div id="item-2" class="section-content" style="display:none;">
                <h4>Cập Nhật Trạng Thái</h4>
                <p>Hiển thị nội dung cập nhật trạng thái ở đây.</p>
                <!-- Bạn có thể thêm form hoặc nội dung cần thiết cho việc cập nhật trạng thái -->
            </div>

            <!-- Modal Cập Nhật Trạng Thái -->
            <div id="status-popup" class="modal" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Cập nhật trạng thái giao hàng</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <input type="text" id="order-id" class="form-control" placeholder="Mã đơn hàng" readonly>
                            <select id="order-status" class="form-select mt-2">
                                <option value="completed">Đã giao</option>
                                <option value="failed">Thất bại</option>
                            </select>
                            <textarea id="failure-reason" class="form-control mt-2" rows="2" placeholder="Lý do thất bại (nếu có)"></textarea>
                            <button class="btn btn-primary mt-2" onclick="updateStatus()">Cập Nhật Trạng Thái</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Lịch Sử Giao Hàng -->
            <div id="item-3" class="section-content">
                <h4>Lịch Sử Giao Hàng</h4>
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Mã Đơn</th>
                            <th>Tên Người Nhận</th>
                            <th>SĐT Người Nhận</th>
                            <th>Địa chỉ</th>
                            <th>Món Ăn</th>
                            <th>Số Lượng</th>
                            <th>Ghi chú</th>
                            <th>Phí Ship</th>
                            <th>Tổng Tiền</th>
                            <th>Ngày Đặt</th>
                            <th>Trạng Thái</th>
                            <th>Hành Động</th>
                        </tr>
                    </thead>
                    <tbody id="history-body">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
         //Lịch sử giao hàng
         document.addEventListener('DOMContentLoaded', () => {
         fetch('/api/shipper/deliveries/delivered', { credentials: 'include' })
        .then(res => res.json())
        .then(data => {
            const deliveries = Array.isArray(data) ? data : data.deliveries;
            renderDeliveriesHistory(deliveries);
        })
        .catch(() => {
            document.getElementById("history-body").innerHTML =
                '<tr><td colspan="13" class="text-center">Không có lịch sử giao hàng!</td></tr>';
        });
    });

    // Hàm để render dữ liệu vào bảng Lịch Sử Giao Hàng
        function renderDeliveriesHistory(deliveries) {
        const tbody = document.getElementById("history-body"); // Lấy tbody của bảng
        tbody.innerHTML = ""; // Xóa dữ liệu cũ

        // Nếu không có dữ liệu, hiển thị thông báo
        if (!deliveries || deliveries.length === 0) {
            tbody.innerHTML = '<tr><td colspan="7" class="text-center">Không có dữ liệu!</td></tr>';
            return;
        }

        // Duyệt qua các đơn hàng đã giao và thêm chúng vào bảng
        deliveries.forEach((delivery, idx) => {
            tbody.innerHTML += `
                <tr>
                    <td>${idx + 1}</td>
                    <td>${delivery.deliveryId}</td>
                    <td>${delivery.receiverName}</td>
                    <td>${delivery.receiverPhone}</td>
                    <td>${delivery.deliveryAddress}</td>
                    <td>${delivery.menuItemName}</td>
                    <td>${delivery.quantity}</td>
                    <td>${delivery.note}</td>
                    <td>${formatMoney(delivery.fee)}</td>
                    <td>${formatMoney(delivery.total)}</td>
                    <td>${new Date(delivery.createdAt).toLocaleString()}</td>
                    <td>${delivery.deliveryStatusName}</td>
                    <td>-</td>
                </tr>
            `;
        });
    }


    // Gọi API để lấy các đơn hàng đã giao
      function formatMoney(money) {
        if (money == null) return '';
        return money.toLocaleString('vi-VN') + " đ";
    }

    

    // Khởi tạo khi trang load
    document.addEventListener('DOMContentLoaded', () => showSection('item-1'));
    //Đơn chờ giao
        fetch('/api/shipper/deliveries/me', {
        method: 'GET',
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        const isShipper = data.roles && data.roles.includes("Shipper");
        let roleHtml = isShipper ? `<span class="badge bg-info">Shipper</span>` : '';
        document.getElementById('user-info').innerHTML =
            `<span style="font-weight:600;">Xin chào: ${data.userName ?? ''}</span>${roleHtml}<br>`;
    })
    .catch(err => {
        document.getElementById('user-info').innerHTML = 'Chưa có dữ liệu';
    });
    // Fetch today's date
    fetch('/api/shipper/deliveries/today')
        .then(res => res.json())
        .then(data => {
            document.getElementById('today-time').innerText = 'Hôm nay ngày: ' + data.todayTime;
        });

    // Format money to Vietnam currency
    function formatMoney(money) {
        if (money == null) return '';
        return money.toLocaleString('vi-VN') + " đ";
    }

    // Group deliveries by OrderId (Optional, if you want to group multiple items of the same order)
    function groupByOrderId(deliveries) {
        const grouped = {};
        deliveries.forEach(d => {
            if (!grouped[d.deliveryId]) {
                grouped[d.deliveryId] = {
                    ...d,
                    menuItems: [],
                    quantities: [],
                    notes: []
                };
            }
            grouped[d.deliveryId].menuItems.push(d.menuItemName);
            grouped[d.deliveryId].quantities.push(d.quantity);
            grouped[d.deliveryId].notes.push(d.note);
        });
        return Object.values(grouped);
    }

    // Render the deliveries in the table
    function renderDeliveries(deliveries) {
        const tbody = document.getElementById("deliveries-body");
        tbody.innerHTML = "";
        if (!deliveries || deliveries.length === 0) {
            tbody.innerHTML = '<tr><td colspan="12" class="text-center">Không có dữ liệu!</td></tr>';
            return;
        }
        const grouped = groupByOrderId(deliveries);
        grouped.forEach((d, idx) => {
            tbody.innerHTML += `
                <tr data-orderid="${d.deliveryId}" data-name="${d.receiverName}" data-phone="${d.receiverPhone}" data-fee="${d.fee}" data-totalprice="${d.total}">
                    <td>${idx + 1}</td>
                    <td>${d.deliveryId ?? ""}</td>
                    <td>${d.receiverName ?? ""}</td>
                    <td>${d.receiverPhone ?? ""}</td>
                    <td>${d.deliveryAddress ?? ""}</td>
                    <td>${d.menuItems.map((m, i) => `${m} x${d.quantities[i]}`).join("<br>")}</td>
                    <td>${d.quantities}</td>
                    <td>${d.notes.filter(n => n).join("<br>")}</td>
                    <td>${formatMoney(d.fee)}</td>
                    <td>${formatMoney(d.total)}</td>
                    <td>${d.createdAt ? (new Date(d.createdAt)).toLocaleString() : ""}</td>
                    <td>${d.deliveryStatusName ?? d.code ?? ""}</td>
                    <td>
                        <button class="btn btn-sm btn-success" onclick="shipOrder('${d.deliveryId}')">Nhận giao hàng</button>
                        <button class="btn btn-sm btn-primary" onclick="openStatusPopup('${d.deliveryId}')">Cập nhật trạng thái</button>
                    </td>
                </tr>
            `;
        });
    }

    // API call to ship the order (change status to 'ON_THE_WAY')
       function shipOrder(deliveryId) {
        // Update status to "ON_THE_WAY" when "Nhận giao hàng" is clicked
        fetch(`/api/shipper/deliveries/update-status/${deliveryId}?status=ON_THE_WAY`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(res => res.json())
        .then(data => {
            if (data.message) {
                alert(data.message);
                location.reload(); // Reload the page after status update
            }
        })
        .catch(err => {
            console.error("Error updating status: ", err);
            alert('Lỗi khi cập nhật trạng thái. Vui lòng thử lại.');
        });
    }

    // API call to open the status update popup and populate the fields
       function openStatusPopup(deliveryId) {
        
        document.getElementById('order-id').value = deliveryId;

        $('#status-popup').modal('show');
    }


    // API call to update delivery status
           function updateStatus() {
        const orderId = document.getElementById('order-id').value; // Get the Order ID
        const status = document.getElementById('order-status').value; // Get the selected status (completed / failed)
        const failureReason = document.getElementById('failure-reason').value; // Get the failure reason (if any)

        // Prepare the appropriate API endpoint based on the status
        let apiUrl = '';
        let statusName = '';

        if (status === 'completed') {
            // Use the "complete-status" endpoint for marking as delivered
            apiUrl = `/api/shipper/deliveries/complete-status/${orderId}`;
            statusName = 'Đã giao';
        } else if (status === 'failed') {
            // Use the "fail-status" endpoint for marking as failed
            apiUrl = `/api/shipper/deliveries/fail-status/${orderId}`;
            statusName = 'Thất bại';
        }

        // Send the request to update the status
        fetch(apiUrl, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                failureReason: failureReason // Send failure reason if applicable
            })
        })
        .then(res => res.json())
        .then(data => {
            if (data.message) {
                // If the update is successful, show a success message and reload the page
                alert(`Trạng thái giao hàng đã được cập nhật thành '${statusName}'`);
                location.reload(); // Reload the page after a successful update
            }
        })
        .catch(err => {
            console.error("Error updating status: ", err);
            alert('Lỗi khi cập nhật trạng thái. Vui lòng thử lại.');
        });
    }

    // Fetch deliveries data
    fetch('/api/shipper/deliveries/list', {
        method: 'GET',
        credentials: 'include'
    })
    .then(res => res.json())
    .then(data => {
        renderDeliveries(data);
    })
    .catch(err => {
        document.getElementById('deliveries-body').innerHTML = '<tr><td colspan="12" class="text-center">Không có dữ liệu!</td></tr>';
    });

    // Switch section
        function showSection(id) {
        // Ẩn tất cả các phần tử có class 'section-content'
        document.querySelectorAll('.section-content').forEach(sec => sec.style.display = 'none');

        // Hiển thị phần tử được chọn
        document.getElementById(id).style.display = 'block';

        // Loại bỏ class 'active' khỏi tất cả các liên kết điều hướng
        document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));

        // Kiểm tra và thêm class 'active' cho phần tử tương ứng
        const navLinks = document.querySelectorAll('.nav-link');

        if (id === 'item-1' && navLinks.length > 0) {
            navLinks[0].classList.add('active'); // Thêm 'active' cho phần tử đầu tiên
        }

        if (id === 'item-2' && navLinks.length > 1) {
            navLinks[1].classList.add('active'); // Thêm 'active' cho phần tử thứ 2
        }

        if (id === 'item-3' && navLinks.length > 2) {
            navLinks[2].classList.add('active'); // Thêm 'active' cho phần tử thứ 3
        }
    }

    document.addEventListener('DOMContentLoaded', () => showSection('item-1'));
</script>

<style>
    .summary-box {
        width: 300px; /* Chiều ngang gọn dễ nhìn */
        background-color: #f8f9fa;
        border: 2px solid #ddd;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        text-align: left;
    }

    .nav-container {
        border: 2px solid #ddd;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .nav-pills .nav-link {
        font-weight: 600;
        padding: 12px 20px;
        margin-right: 10px;
        color: #007bff;
    }

        .nav-pills .nav-link.active {
            background-color: #007bff;
            color: white;
        }

    .bg-light {
        background-color: #f8f9fa !important;
    }

    .modal .modal-dialog {
        max-width: 500px;
    }
</style>
